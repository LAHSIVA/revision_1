/////////////////// MENU DRIVEN //////////////////////


#include <windows.h>
#include <iostream>
#include <gl/glut.h>
#include<cmath>

#include <math.h>
#include <vector>
#define SCREEN_HEIGHT 480
#define SCREEN_WIDTH 640
using namespace std;

vector<pair<int, int> > points;
vector<pair<int, int> > points_plot;
static int count=0;
static int flag=0;

void init()
{
    glClearColor(1.0f, 1.0f, 1.0f, 0);
    glPointSize(1.0f);
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    gluOrtho2D(0.0, 640.0, 0.0, 480.0);
}

void display(void)
{

    glBegin(GL_LINES);
        glVertex2f(320,480);
        glVertex2f(320,0);
        glVertex2f(0,240);
        glVertex2f(640,240);
    glEnd();

    glFlush();

}

void setpixel(float x1,float y1,float p1,float p2) // p1 = xk, p2 = yk
{
    glBegin(GL_POINTS);
        glColor3f(1, 0, 0);
        glVertex2f(x1+p1,y1+p2);
        glColor3f(0, 1, 0);
        glVertex2f(x1-p1,y1+p2);
        glColor3f(0, 0, 1);
        glVertex2f(x1+p1,y1-p2);
        glColor3f(1, 1, 0);
        glVertex2f(x1-p1,y1-p2);
        glColor3f(1, 1, 1);
        glVertex2f(x1+p2,y1+p1);
        glColor3f(0, 1, 1);
        glVertex2f(x1-p2,y1+p1);
        glColor3f(1, 0, 1);
        glVertex2f(x1+p2,y1-p1);
        glColor3f(0, 0.31, 0.7);
        glVertex2f(x1-p2,y1-p1);
    glEnd();
    glFlush();

}



void triangle(float x1, float y1, float x2, float y2,float x3, float y3)
{
    glPolygonMode(GL_FRONT_AND_BACK,GL_LINE);
    glBegin(GL_TRIANGLES);
        glVertex2f(x1,y1);
        glVertex2f(x2,y2);
        glVertex2f(x3,y3);
    glEnd();
    glFlush();

}


void circle(int x0, int y0,int x1, int y1)
{
    float r = pow(pow((x1-x0),2)+pow((y1-y0),2),0.5);
    float xk=0;
    float yk=r;
    float p0 = 1-r ;
    float pk;
    pk = p0;
    setpixel(x0,y0,xk,yk);
    while(xk <= yk)
    {
        if (pk<0)
        {
            xk += 1;
            pk=pk+2*(xk)+1;
            yk=yk;
        }
        else if(pk>=0)
        {
            xk += 1;
            yk -= 1;
            pk=pk+(2*xk)-(2*yk)+1;
        }
        setpixel(x0,y0,xk,yk);
    }

}


void line(float x1, float y1, float x2, float y2)
{
    glBegin(GL_LINES);
        glVertex2f(x1,y1);
        glVertex2f(x2,y2);
    glEnd();
    glFlush();

}



float** scaling(const vector<pair<int, int> > points_plot,float scale=1)
{
    int i,j;
    float scaling_mat[3][3]={{scale,0,(SCREEN_WIDTH/2)*(1-scale)},{0,scale,(SCREEN_HEIGHT/2)*(1-scale)},{0,0,1}};

    float** coord = new float*[3];
    for (int i = 0; i < 3; ++i) {
        coord[i] = new float[points_plot.size()];
        for (int j = 0; j < points_plot.size(); ++j) {
            coord[i][j] = 0;
        }
    }

    float** result = new float*[3];
    for (int i = 0; i < 3; ++i) {
        result[i] = new float[points_plot.size()];
        for (int j = 0; j < points_plot.size(); ++j) {
            result[i][j] = 0;
        }
    }

    for (j=0;j<points_plot.size();j++)
    {
        coord[0][j]=points_plot[j].first;
        coord[1][j]=points_plot[j].second;
        coord[2][j]=1;
    }

    for(i=0;i<3;i++)
    {
        for (j=0;j<points_plot.size();j++)
        {
            float sum = 0;
            for (int k = 0; k < 3; ++k) {
                sum += scaling_mat[i][k] * coord[k][j];
            }
            result[i][j] = sum;

        }
    }
    return result;

}

float** rotation(const vector<pair<int, int> > points_plot, float deg=1 )
{
    float degree=deg*3.14159/180;
    int i,j;
    // Multiplying matrix first and second

    float** coord = new float*[3];
    for (int i = 0; i < 3; ++i) {
        coord[i] = new float[points_plot.size()];
        for (int j = 0; j < points_plot.size(); ++j) {
            coord[i][j] = 0;
        }
    }

    float** result = new float*[3];
    for (int i = 0; i < 3; ++i) {
        result[i] = new float[points_plot.size()];
        for (int j = 0; j < points_plot.size(); ++j) {
            result[i][j] = 0;
        }
    }

    for (int j = 0; j <points_plot.size() ; j++)
    {
        coord[0][j]=points_plot[j].first;
        coord[1][j]=points_plot[j].second;
        coord[2][j]=1;
    }

    float rotation[3][3]={{cos(degree),-sin(degree),(SCREEN_WIDTH/2)*(1-cos(degree))+(SCREEN_HEIGHT/2)*sin(degree)},{sin(degree),cos(degree),(SCREEN_WIDTH/2)*(-sin(degree))+(SCREEN_HEIGHT/2)*(1-cos(degree))},{0,0,1}};


    for (int i = 0; i < 3; ++i) {

        for (int j = 0; j <points_plot.size() ; ++j) {

            float sum = 0;
            for (int k = 0; k < 3; ++k) {
                sum += rotation[i][k] * coord[k][j];
            }
            result[i][j] = sum;
        }
    }
    return result;
}


void mouseHandling(int button,int state,int x, int y)
{
    if (button==GLUT_LEFT && state==GLUT_DOWN)
    {
        y = SCREEN_HEIGHT-y;
        cout << "Xcoord : " << x << " YCoord : "<< y << endl;
        points.push_back(make_pair(x, y));
    }

}

void mainMenuHandler(int choice) {

    switch (choice){
    case 1:
        float** arr;
        arr = rotation(points_plot);
        if(flag==1)
        {
            line(arr[0][0],arr[1][0],arr[0][1],arr[1][1]);
        }
        else if(flag==2)
        {
            circle(arr[0][0],arr[1][0],arr[0][1],arr[1][1]);
        }
        else if(flag==3)
        {
            triangle(arr[0][0],arr[1][0],arr[0][1],arr[1][1],arr[0][2],arr[1][2]);
        }
        break;
    case 2:
        exit(0);
        break;
    }

}

void subMenuHandler(int choice)
{
    float** arr;
    switch(choice) {
    case 0:
        if(flag==1)
        {
            line(points_plot[count].first, points_plot[count].second+100, points_plot[count+1].first, points_plot[count+1].second+100);
        }
        else if(flag==2)
        {
            circle(points_plot[count].first, points_plot[count].second+100,points_plot[count+1].first, points_plot[count+1].second+100);
        }
        else if(flag==3)
        {
            triangle(points_plot[count].first, points_plot[count].second+100, points_plot[count+1].first, points_plot[count+1].second+100,points_plot[count+2].first, points_plot[count+2].second+100);
        }
        break;
    case 1:
        if(flag==1)
        {
            line(points_plot[count].first, points_plot[count].second-100, points_plot[count+1].first, points_plot[count+1].second-100);
        }
        else if(flag==2)
        {
            circle(points_plot[count].first, points_plot[count].second-100,points_plot[count+1].first, points_plot[count+1].second-100);
        }
        else if(flag==3)
        {
            triangle(points_plot[count].first, points_plot[count].second-100, points_plot[count+1].first, points_plot[count+1].second-100,points_plot[count+2].first, points_plot[count+2].second-100);
        }
        break;
    case 2:
        if(flag==1)
        {
            line(points_plot[count].first+100, points_plot[count].second, points_plot[count+1].first+100, points_plot[count+1].second);
        }
        else if(flag==2)
        {
            circle(points_plot[count].first+100, points_plot[count].second,points_plot[count+1].first+100, points_plot[count+1].second);
        }
        else if(flag==3)
        {
            triangle(points_plot[count].first+100, points_plot[count].second, points_plot[count+1].first+100, points_plot[count+1].second,points_plot[count+2].first+100, points_plot[count+2].second);
        }
        break;
    case 3:
        if(flag==1)
        {
            line(points_plot[count].first-100, points_plot[count].second, points_plot[count+1].first-100, points_plot[count+1].second);
        }
        else if(flag==2)
        {
            circle(points_plot[count].first-100, points_plot[count].second,points_plot[count+1].first-100, points_plot[count+1].second);
        }
        else if(flag==3)
        {
            triangle(points_plot[count].first-100, points_plot[count].second, points_plot[count+1].first-100, points_plot[count+1].second,points_plot[count+2].first-100, points_plot[count+2].second);
        }
        break;
    }

}

void shapeHandler(int choice)
{
    switch(choice) {
    case 1:
        flag=1;
        line(points[count].first, points[count].second, points[count+1].first, points[count+1].second);
        points_plot=points;
        points.clear();
        break;
    case 2:
        flag=2;
        circle(points[count].first, points[count].second, points[count+1].first, points[count+1].second);
        points_plot=points;
        points.clear();
        break;
    case 3:
        flag=3;
        triangle(points[count].first, points[count].second, points[count+1].first, points[count+1].second,points[count+2].first, points[count+2].second);
        points_plot=points;
        points.clear();
        break;
    }
}

void scaleHandler(int choice)
{
    float** arr;
    switch(choice) {
    case 1:
        arr=scaling(points_plot,0.5);
        if(flag==1)
        {
            line(arr[0][0],arr[1][0],arr[0][1],arr[1][1]);
        }
        else if(flag==2)
        {
            circle(arr[0][0],arr[1][0],arr[0][1],arr[1][1]);
        }
        else if(flag==3)
        {
            triangle(arr[0][0],arr[1][0],arr[0][1],arr[1][1],arr[0][2],arr[1][2]);
        }
        break;
    case 2:
        arr=scaling(points_plot,2);
        if(flag==1)
        {
            line(arr[0][0],arr[1][0],arr[0][1],arr[1][1]);
        }
        else if(flag==2)
        {
            circle(arr[0][0],arr[1][0],arr[0][1],arr[1][1]);
        }
        else if(flag==3)
        {
            triangle(arr[0][0],arr[1][0],arr[0][1],arr[1][1],arr[0][2],arr[1][2]);
        }
        break;
    case 3:
        arr=scaling(points_plot,6);
        if(flag==1)
        {
            line(arr[0][0],arr[1][0],arr[0][1],arr[1][1]);
        }
        else if(flag==2)
        {
            circle(arr[0][0],arr[1][0],arr[0][1],arr[1][1]);
        }
        else if(flag==3)
        {
            triangle(arr[0][0],arr[1][0],arr[0][1],arr[1][1],arr[0][2],arr[1][2]);
        }
        break;
    }
}

int main(int argc, char **argv)
{
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_SINGLE|GLUT_RGB);
    glutInitWindowPosition(200, 200);
    glutInitWindowSize(640, 480);
    glutCreateWindow("OpenGL Menus and Algorithms");
    glutDisplayFunc(display);
    init();
    glutMouseFunc(mouseHandling);

    int subMenu = glutCreateMenu(subMenuHandler);
    glutAddMenuEntry("Up", 0);
    glutAddMenuEntry("Down", 1);
    glutAddMenuEntry("Right", 2);
    glutAddMenuEntry("left", 3);


    int shapes= glutCreateMenu(shapeHandler);
    glutAddMenuEntry("Line", 1);
    glutAddMenuEntry("Circle", 2);
    glutAddMenuEntry("Triangle", 3);

    int scale= glutCreateMenu(scaleHandler);
    glutAddMenuEntry("0.5x", 1);
    glutAddMenuEntry("2x", 2);
    glutAddMenuEntry("5x", 3);


    glutCreateMenu(mainMenuHandler);
    glutAddSubMenu("Shapes", shapes);
    glutAddSubMenu("Translation", subMenu);
    glutAddSubMenu("Scaling", scale);
    glutAddMenuEntry("Rotation in degree", 1);
    glutAddMenuEntry("Exit", 2);
    glutAttachMenu(GLUT_RIGHT_BUTTON);
    glutMainLoop();

return 0;
}
